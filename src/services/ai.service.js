const { logger } = require('../utils/logger');
require('dotenv').config(); // Ensure dotenv is loaded

/**
 * Service to interact with OpenRouter API using Deepseek model
 */
class AIService {
  constructor() {
    // Don't load API key in constructor, we'll get it on demand
    this.model = process.env.OPENROUTER_MODEL || 'deepseek/deepseek-chat-v3-0324:free';
    this.apiUrl = 'https://openrouter.ai/api/v1/chat/completions';
    
    logger.info('AI Service initialized');
  }

  /**
   * Get API key from environment
   * @returns {string} API key
   */
  getApiKey() {
    const apiKey = process.env.OPENROUTER_API_KEY;
    if (!apiKey) {
      logger.error('OpenRouter API key not found in environment variables');
      throw new Error('API key is missing. Please check your .env file');
    }
    return apiKey;
  }

  /**
   * Generate content using the OpenRouter API
   * 
   * @param {Array} messages - Array of message objects with role and content
   * @param {Object} options - Additional options for the API call
   * @returns {Promise<string>} - The generated content
   */
  async generateContent(messages, options = {}) {
    try {
      const defaultOptions = {
        temperature: 0.7,
        max_tokens: 1000
      };

      const requestOptions = { ...defaultOptions, ...options };
      const apiKey = this.getApiKey(); // Get API key on demand

      logger.info(`Calling OpenRouter API with model: ${this.model}`);
      
      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${apiKey}`,
          "HTTP-Referer": "https://social-automation-app.com",
          "X-Title": "Social Automation Tool",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: this.model,
          messages: messages,
          ...requestOptions
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        logger.error(`Request failed with status code ${response.status}`);
        logger.error(`Response data: ${errorText}`);
        throw new Error(`Request failed with status code ${response.status}`);
      }

      const data = await response.json();
      
      if (data.choices && data.choices.length > 0) {
        return data.choices[0].message.content;
      } else {
        throw new Error('No content was generated by the AI model');
      }
    } catch (error) {
      logger.error(`Error calling OpenRouter API: ${error.message}`);
      throw new Error(`Failed to generate content: ${error.message}`);
    }
  }

  /**
   * Generate a LinkedIn post based on a prompt
   * 
   * @param {string} prompt - Detailed prompt for post generation
   * @returns {Promise<string>} - The generated LinkedIn post
   */
  async generateLinkedInPost(prompt) {
    const messages = [
      {
        role: 'system',
        content: 'You are an expert LinkedIn content creator. Your task is to create engaging, professional LinkedIn posts that provide value to readers in the tech industry, particularly focusing on web development, React.js, Next.js, backend development, and AI.'
      },
      {
        role: 'user',
        content: prompt
      }
    ];

    return this.generateContent(messages, {
      temperature: 0.8,
      max_tokens: 1500
    });
  }

  /**
   * Refine a LinkedIn post based on user feedback
   * 
   * @param {string} originalPost - The original post content to refine
   * @param {string} feedback - User feedback for refinement
   * @returns {Promise<string>} - The refined LinkedIn post
   */
  async refineLinkedInPost(originalPost, feedback) {
    const messages = [
      {
        role: 'system',
        content: 'You are an expert LinkedIn content creator. Your task is to refine an existing LinkedIn post based on user feedback. Maintain the professional tone and ensure the post includes a hook, valuable content, an engagement question, and a call-to-action.'
      },
      {
        role: 'user',
        content: `Original post:\n${originalPost}\n\nFeedback:\n${feedback}\n\nPlease refine this LinkedIn post based on the feedback provided.`
      }
    ];

    return this.generateContent(messages, {
      temperature: 0.7,
      max_tokens: 1500
    });
  }
}

module.exports = new AIService();